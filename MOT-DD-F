import time
import sys
import logging
from pathlib import Path
from typing import Optional

import pandas as pd
import pyautogui
from pyscreeze import ImageNotFoundException
import tkinter as tk
from tkinter import messagebox

# === Configurações Gerais ===
pyautogui.FAILSAFE = True
pyautogui.PAUSE = 0.3

# === Constantes de Configuração ===
BASE_DIR        = Path(r'W:\COMERCIAL\00 - ROBO\MOT-DD-F')
EXCEL_PATH      = BASE_DIR / 'Fatu_dia.xlsx'
IMG_DIR         = BASE_DIR / 'Imagens'

SHEET_BASE      = 'BASE'
SHEET_PRINCIPAL = 'CEN_PLA'
SHEET_OUTROS    = 'OUTROS'  # Nome correto da aba para "Outros"

TIMINGS = {
    'lupa_after':       1.0,
    'tab':              0.3,
    'confirm':          1.0,
    'copy':             0.5,
    'wait_before_nao':  2.0,
    'error':            0.5,
    'before_ctrl_t':    0.2,
    'between_6_7':      3.0,  # intervalo entre Etapa 6 e 7
}

IMAGES = {
    'lupa':               IMG_DIR / 'pedido-lupa.png',
    'confirm_pedido':     IMG_DIR / 'pedido-conf.png',
    'copy':               IMG_DIR / 'copiar.png',
    'no':                 IMG_DIR / 'erro_nao.png',
    'confirmar':          IMG_DIR / 'confirmar.png',  # usado em Etapa 6
}

# === Logging ===
logging.basicConfig(
    format='%(asctime)s [%(levelname)s] %(message)s',
    level=logging.INFO,
    datefmt='%H:%M:%S'
)
log = logging.getLogger(__name__)


class RoboLogix:
    def __init__(self):
        self.excel_path = EXCEL_PATH
        self.images = IMAGES
        self.timings = TIMINGS
        self.df_base = None
        self.df_principal = None
        self.df_outros = None
        self.confirmar_pos: Optional[pyautogui.Point] = None  # Armazena coordenadas do botão "confirmar"
        self._load_excel()

    def _load_excel(self):
        if not self.excel_path.exists():
            log.error(f"Arquivo não encontrado: {self.excel_path}")
            sys.exit(1)
        try:
            self.df_base = pd.read_excel(self.excel_path, sheet_name=SHEET_BASE, header=None)
            self.df_principal = pd.read_excel(self.excel_path, sheet_name=SHEET_PRINCIPAL)
            try:
                self.df_outros = pd.read_excel(self.excel_path, sheet_name=SHEET_OUTROS)
            except Exception:
                self.df_outros = None
            log.info("Planilhas carregadas com sucesso.")
        except Exception as e:
            log.error(f"Falha ao ler Excel: {e}")
            sys.exit(1)

        # Validação mínima da planilha BASE
        if self.df_base.shape[0] < 1 or self.df_base.shape[1] < 2:
            log.error("Planilha BASE deve ter ao menos 1 linha e 2 colunas.")
            sys.exit(1)

        # Validação mínima da planilha PRINCIPAL
        if self.df_principal.shape[0] < 1 or self.df_principal.shape[1] < 9:
            log.error(f"Planilha {SHEET_PRINCIPAL} deve ter ao menos 1 linha com 9 colunas.")
            sys.exit(1)

        # Se existir a planilha OUTROS, validar estrutura
        if self.df_outros is not None:
            if self.df_outros.shape[0] < 1 or self.df_outros.shape[1] < 9:
                log.error(f"Planilha {SHEET_OUTROS} existe mas não tem ao menos 1 linha com 9 colunas.")
                sys.exit(1)

    def localizar(self, img_path: Path, timeout: float = 8, confidences=(0.8, 0.6)) -> Optional[pyautogui.Point]:
        end_time = time.time() + timeout
        while time.time() < end_time:
            for conf in confidences:
                try:
                    pos = pyautogui.locateCenterOnScreen(str(img_path), confidence=conf, grayscale=True)
                    if pos:
                        log.info(f"Imagem '{img_path.name}' encontrada em {pos} (conf={conf})")
                        return pos
                except ImageNotFoundException:
                    pass
                except Exception as e:
                    log.warning(f"Erro ao buscar '{img_path.name}': {e}")
            time.sleep(0.2)
        log.warning(f"Timeout procurando '{img_path.name}'.")
        return None

    def localizar_central(self, img_path: Path, timeout: float = 8, confidences=(0.8, 0.6)) -> Optional[pyautogui.Point]:
        end_time = time.time() + timeout
        sw, sh = pyautogui.size()
        centro = (sw / 2, sh / 2)

        while time.time() < end_time:
            for conf in confidences:
                try:
                    matches = list(pyautogui.locateAllOnScreen(str(img_path), confidence=conf, grayscale=True))
                    if matches:
                        melhor = min(
                            matches,
                            key=lambda b: ((b.left + b.width/2 - centro[0])**2 + (b.top + b.height/2 - centro[1])**2)
                        )
                        p = pyautogui.center(melhor)
                        log.info(f"Imagem central '{img_path.name}' em {p} (conf={conf})")
                        return p
                except ImageNotFoundException:
                    pass
                except Exception as e:
                    log.warning(f"Erro ao buscar central '{img_path.name}': {e}")
            time.sleep(0.2)
        log.warning(f"Timeout procurando central '{img_path.name}'.")
        return None

    def read_pedido(self) -> str:
        raw = self.df_base.iloc[0, 1]
        pedido = str(raw).strip()
        if not pedido or pedido.lower() == 'nan':
            log.error("Valor inválido em BASE!B1.")
            sys.exit(1)
        log.info(f"Pedido lido: {pedido}")
        return pedido

    def etapa01_buscar_pedido(self, pedido: str):
        log.info("=== Etapa 01: Buscar pedido ===")
        pos = self.localizar(self.images['lupa'])
        if not pos:
            raise RuntimeError("Ícone de lupa não encontrado.")
        pyautogui.doubleClick(pos.x, pos.y, interval=0.2)
        time.sleep(self.timings['lupa_after'])

        pyautogui.press('tab')
        time.sleep(self.timings['tab'])
        pyautogui.write(pedido, interval=0.05)
        time.sleep(self.timings['tab'])

        pos_conf = self.localizar(self.images['confirm_pedido'])
        if pos_conf:
            pyautogui.click(pos_conf)
            log.info("Clicou em Confirmar pedido.")
        else:
            pyautogui.press('enter')
            log.warning("Confirmar pedido não achado; usou ENTER.")
        time.sleep(self.timings['confirm'])

    def etapa02_copiar(self):
        log.info("=== Etapa 02: Copiar ===")
        pos = self.localizar(self.images['copy'])
        if not pos:
            raise RuntimeError("Botão 'Copiar' não encontrado.")
        pyautogui.click(pos)
        time.sleep(self.timings['copy'])
        log.info("Clicou em Copiar.")

    def etapa03_clicar_nao(self):
        log.info("=== Etapa 03: Não ===")
        time.sleep(self.timings['wait_before_nao'])
        pos = self.localizar(self.images['no'], timeout=8)
        if not pos:
            raise RuntimeError("Botão 'Não' não encontrado.")
        pyautogui.click(pos)
        time.sleep(self.timings['error'])
        log.info("Clicou em Não.")

    def etapa04_incluir_e_depositar(self):
        log.info(f"=== Etapa 04: Incluir item e depositar (primeira linha de {self.nome_planilha}) ===")
        row         = self.df_atual.iloc[0]
        item        = row.iloc[0]
        deposito    = str(row.iloc[5]).upper()
        prog_remes  = row.iloc[6]
        linha       = row.iloc[7]
        saldo       = row.iloc[8]

        # Navega até campo Item
        for _ in range(13):
            pyautogui.press('tab')
        pyautogui.press('right')
        time.sleep(0.5)

        # Preenche Item
        pyautogui.write(str(item), interval=0.05)
        log.info(f"Item preenchido: {item}")
        time.sleep(0.5)

        # Preenche Saldo e confirma com Enter
        pyautogui.press('tab')
        time.sleep(0.1)
        pyautogui.write(str(saldo), interval=0.05)
        log.info(f"Saldo preenchido: {saldo}")
        time.sleep(0.8)
        pyautogui.press('enter')
        log.info("⏎ Enter pressionado após saldo.")
        time.sleep(self.timings['before_ctrl_t'])

        # Abre dados adicionais com Ctrl+T
        pyautogui.hotkey('ctrl', 't')
        log.info("Ctrl+T executado.")
        time.sleep(self.timings['before_ctrl_t'])

        # Preenche Depósito (maiúsculo)
        pyautogui.press('tab')
        time.sleep(1.5)
        pyautogui.write(deposito, interval=0.05)
        log.info(f"Depósito preenchido: {deposito}")
        time.sleep(1.5)

        # Clica em Confirmar Depósito (central) — agora usando coordenadas armazenadas
        if self.confirmar_pos is None:
            pos_conf_dep = self.localizar_central(self.images['confirmar'])
            if not pos_conf_dep:
                raise RuntimeError(f"Botão 'confirmar.png' não encontrado no centro em Etapa 04 ({self.nome_planilha}).")
            self.confirmar_pos = pos_conf_dep
            log.info(f"Coordenadas de 'confirmar' armazenadas: {self.confirmar_pos}")
        else:
            pos_conf_dep = self.confirmar_pos

        pyautogui.click(pos_conf_dep)
        log.info("✅ Confirmou Depósito (central).")
        time.sleep(self.timings['confirm'])

        # Continua com Prog Remes e Linha
        for _ in range(6):
            pyautogui.press('right')
            time.sleep(0.1)
        log.info("Avançou 6 vezes com seta para direita.")

        pyautogui.write(str(prog_remes), interval=0.05)
        log.info(f"Prog Remes preenchido: {prog_remes}")
        time.sleep(0.2)

        pyautogui.press('enter')
        log.info("⏎ Enter para confirmar Prog Remes.")
        time.sleep(0.3)

        pyautogui.write(str(linha), interval=0.05)
        log.info(f"Linha preenchida: {linha}")
        time.sleep(0.1)
        pyautogui.press('enter')
        log.info("⏎ Enter para confirmar Linha.")
        time.sleep(self.timings['copy'])

    def etapa05_incluir_todos_itens(self):
        log.info(f"=== Etapa 05: Incluir itens a partir da linha 3 de {self.nome_planilha} ===")
        total_linhas = self.df_atual.shape[0]
        if total_linhas < 2:
            log.info(f"Nenhuma linha adicional em {self.nome_planilha} para Etapa 05.")
            return

        first_iteration = True
        # Itera a partir do índice 1 (linha 3 do Excel)
        for idx, row in self.df_atual.iloc[1:].iterrows():
            item        = row.iloc[0]
            deposito    = str(row.iloc[5]).upper()
            prog_remes  = row.iloc[6]
            linha       = row.iloc[7]
            saldo       = row.iloc[8]

            log.info(f"--- Processando linha {idx + 2} do Excel ({self.nome_planilha}): item={item} ---")

            # Preenche Item
            pyautogui.write(str(item), interval=0.05)
            log.info(f"Item preenchido: {item}")
            time.sleep(0.2)

            # Preenche Saldo e confirma com Enter
            pyautogui.press('tab')
            time.sleep(0.2)
            pyautogui.write(str(saldo), interval=0.1)
            log.info(f"Saldo preenchido: {saldo}")
            time.sleep(0.1)
            pyautogui.press('enter')
            log.info("⏎ Enter pressionado após saldo.")
            time.sleep(self.timings['before_ctrl_t'])

            # Ajuste: somente na primeira iteração clicar em "erro_nao.png" duas vezes
            if first_iteration:
                for _ in range(2):
                    pos_no = self.localizar(self.images['no'])
                    if not pos_no:
                        raise RuntimeError("Botão 'Não' não encontrado na primeira iteração da Etapa 5.")
                    pyautogui.click(pos_no)
                    time.sleep(0.3)
                log.info("Clicou em 'Não' duas vezes na primeira execução da Etapa 5.")
                first_iteration = False

            # Abre dados adicionais com Ctrl+T
            pyautogui.hotkey('ctrl', 't')
            log.info("Ctrl+T executado.")
            time.sleep(self.timings['before_ctrl_t'])

            # Preenche Depósito
            pyautogui.press('tab')
            time.sleep(1.0)
            pyautogui.write(deposito, interval=0.1)
            log.info(f"Depósito preenchido: {deposito}")
            time.sleep(1.0)

            # Confirma Depósito (usar coordenadas armazenadas, se existirem)
            if self.confirmar_pos is None:
                pos_conf_dep = self.localizar_central(self.images['confirmar'])
                if not pos_conf_dep:
                    raise RuntimeError(f"Botão 'confirmar.png' não encontrado para linha {idx + 2} ({self.nome_planilha}).")
                self.confirmar_pos = pos_conf_dep
                log.info(f"Coordenadas de 'confirmar' armazenadas: {self.confirmar_pos}")
            else:
                pos_conf_dep = self.confirmar_pos

            pyautogui.click(pos_conf_dep)
            log.info("✅ Confirmou Depósito (central).")
            time.sleep(self.timings['confirm'])

            # Preenche Prog Remes e Linha
            for _ in range(6):
                pyautogui.press('right')
                time.sleep(0.05)
            log.info("Avançou 6 vezes com seta para direita.")

            pyautogui.write(str(prog_remes), interval=0.05)
            log.info(f"Prog Remes preenchido: {prog_remes}")
            time.sleep(0.2)

            pyautogui.press('enter')
            log.info("⏎ Enter para confirmar Prog Remes.")
            time.sleep(0.2)

            pyautogui.write(str(linha), interval=0.1)
            log.info(f"Linha preenchida: {linha}")
            time.sleep(0.1)
            pyautogui.press('enter')
            log.info("⏎ Enter para confirmar Linha.")
            time.sleep(self.timings['copy'])

        log.info(f"✅ Todas as linhas adicionais de {self.nome_planilha} foram processadas na Etapa 05.")

    def etapa06_confirmar_lancamento(self):
        log.info(f"=== Etapa 06: Confirmar lançamento ({self.nome_planilha}) ===")
        # Usar coordenadas armazenadas ou localizar pela primeira vez
        if self.confirmar_pos is None:
            pos = self.localizar_central(self.images['confirmar'])
            if not pos:
                raise RuntimeError(f"Botão 'confirmar.png' não encontrado na Etapa 06 ({self.nome_planilha}).")
            self.confirmar_pos = pos
            log.info(f"Coordenadas de 'confirmar' armazenadas: {self.confirmar_pos}")
        else:
            pos = self.confirmar_pos

        pyautogui.click(pos)
        log.info("✅ Clique em 'confirmar.png' executado.")
        time.sleep(self.timings['confirm'])

    def processar_planilha(self, df: pd.DataFrame, nome: str, pedido: str):
        """
        Processa todo o fluxo (Etapas 1 a 6) para a planilha passada.
        nome: string descritiva para logs (ex: 'CEN_PLA' ou 'OUTROS')
        """
        # Reiniciar coordenadas de confirmar para cada nova planilha, se desejado.
        # Se preferir usar a mesma coordenada entre planilhas, comente a linha abaixo.
        self.confirmar_pos = None

        self.df_atual = df
        self.nome_planilha = nome

        self.etapa01_buscar_pedido(pedido)
        self.etapa02_copiar()
        self.etapa03_clicar_nao()
        self.etapa04_incluir_e_depositar()
        self.etapa05_incluir_todos_itens()
        self.etapa06_confirmar_lancamento()

    def escolher_escopo(self) -> str:
        """Exibe diálogo para escolher escopo de execução."""
        escolha = pyautogui.confirm(
            text="Selecione o escopo de execução:",
            title="Opções de Execução",
            buttons=[f"Apenas {SHEET_PRINCIPAL}", f"Apenas {SHEET_OUTROS}", "Ambas"]
        )
        if escolha is None:
            log.error("Execução cancelada pelo usuário.")
            sys.exit(0)
        return escolha


def perguntar_confirmacao_etapa7() -> bool:
    """
    Exibe uma janela de confirmação para Etapa 7.
    Retorna True se o usuário clicar em 'OK', False caso cancele.
    """
    root = tk.Tk()
    root.withdraw()
    resposta = messagebox.askokcancel(
        title="Confirmação Etapa 7",
        message="Deseja iniciar a Etapa 7 (OUTROS)?\n"
                "Você pode mover esta janela e continuar trabalhando sem interromper o sistema."
    )
    root.destroy()
    return resposta


if __name__ == "__main__":
    try:
        robo = RoboLogix()
        escopo = robo.escolher_escopo()
        pedido = robo.read_pedido()

        # Executar apenas CEN_PLA
        if escopo == f"Apenas {SHEET_PRINCIPAL}":
            log.info(f"Iniciando fluxo somente para {SHEET_PRINCIPAL}.")
            robo.processar_planilha(robo.df_principal, SHEET_PRINCIPAL, pedido)
            log.info(f"✅ Fluxo concluído para {SHEET_PRINCIPAL}.")

        # Executar apenas OUTROS
        elif escopo == f"Apenas {SHEET_OUTROS}":
            if robo.df_outros is None:
                log.error(f"Planilha {SHEET_OUTROS} não encontrada ou não carregada.")
                sys.exit(1)
            log.info(f"Iniciando fluxo somente para {SHEET_OUTROS}.")
            robo.processar_planilha(robo.df_outros, SHEET_OUTROS, pedido)
            log.info(f"✅ Fluxo concluído para {SHEET_OUTROS}.")

        # Executar ambas
        else:  # "Ambas"
            log.info(f"Iniciando fluxo para {SHEET_PRINCIPAL}.")
            robo.processar_planilha(robo.df_principal, SHEET_PRINCIPAL, pedido)
            log.info(f"✅ Fluxo concluído para {SHEET_PRINCIPAL}.")

            time.sleep(TIMINGS['between_6_7'])

            # Verificar se OUTROS existe antes de perguntar
            if robo.df_outros is None:
                log.error(f"Planilha {SHEET_OUTROS} não encontrada ou não carregada.")
                sys.exit(1)

            if perguntar_confirmacao_etapa7():
                log.info(f"Iniciando fluxo para {SHEET_OUTROS}.")
                robo.processar_planilha(robo.df_outros, SHEET_OUTROS, pedido)
                log.info(f"✅ Fluxo concluído para {SHEET_OUTROS}.")
            else:
                log.info("Etapa 7 cancelada pelo usuário. Encerrando.")

    except Exception as e:
        log.exception(f"Erro na automação: {e}")
        sys.exit(1)
